--- [CREATE/CONNECT DATABASE] --------------------------------------------------
CONNECT 'jdbc:derby://localhost:1527/dbn45contacts;create=true;user=root;password=root';

--- [MODELS] -------------------------------------------------------------------
CREATE TABLE
    MEMBER (
        "ID" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        "EMAIL" VARCHAR(50) UNIQUE NOT NULL,
        "USERNAME" VARCHAR(50) NOT NULL,
        "PASSWORD" VARCHAR(50) NOT NULL,
        "DOB" DATE NOT NULL, --Date of Birth--
        "BALANCE" INT DEFAULT 0,
        "IMAGE" VARCHAR(80) DEFAULT ''
    );

CREATE TABLE
    PRODUCT (
        "ID" INT PRIMARY KEY,
        "NAME" VARCHAR(50) NOT NULL,
        "BRAND" VARCHAR(25) NOT NULL,
        "INFO" VARCHAR(250) NOT NULL,
        "PRICE" INT NOT NULL,
        "IMAGE" VARCHAR(50)
    );

CREATE TABLE
    WISHLIST (
        "MEMBER_ID" INT NOT NULL,
        "PRODUCT_ID" INT NOT NULL,
        PRIMARY KEY ("MEMBER_ID", "PRODUCT_ID"),
        FOREIGN KEY ("MEMBER_ID") REFERENCES MEMBER ("ID"),
        FOREIGN KEY ("PRODUCT_ID") REFERENCES PRODUCT ("ID")
    );

CREATE TABLE
    FRIENDSHIP (
        "MEMBER_ID" INT NOT NULL,
        "FRIEND_ID" INT NOT NULL,
        "STATUS" VARCHAR(50) DEFAULT 'PENDING',
        PRIMARY KEY ("MEMBER_ID", "FRIEND_ID"),
        FOREIGN KEY ("MEMBER_ID") REFERENCES MEMBER ("ID"),
        FOREIGN KEY ("FRIEND_ID") REFERENCES MEMBER ("ID")
    );

CREATE TABLE
    CONTRIBUTION (
        "FROM_MEMBER_ID" INT NOT NULL,
        "TO_MEMBER_ID" INT NOT NULL,
        "PRODUCT_ID" INT NOT NULL,
        "TIMESTAMP" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        "AMOUNT" INT NOT NULL CHECK ("AMOUNT" > 0),
        PRIMARY KEY (
            "FROM_MEMBER_ID",
            "TO_MEMBER_ID",
            "PRODUCT_ID",
            "TIMESTAMP"
        ),
        FOREIGN KEY ("FROM_MEMBER_ID") REFERENCES MEMBER ("ID"),
        FOREIGN KEY ("TO_MEMBER_ID") REFERENCES MEMBER ("ID"),
        FOREIGN KEY ("PRODUCT_ID") REFERENCES PRODUCT ("ID")
    );

CREATE TABLE
    NOTIFICATION (
        "ID" INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
        "MEMBER_ID" INT NOT NULL,
        "INFO" VARCHAR(120) NOT NULL,
        "TIMESTAMP" TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY ("MEMBER_ID") REFERENCES MEMBER ("ID")
    );

--- [VIEWS] --------------------------------------------------------------------
-- Friends view (used per member)
CREATE VIEW
    FRIENDS_VIEW AS
SELECT
    F.MEMBER_ID AS MEMBER_ID,
    F.FRIEND_ID AS FRIEND_ID,
    M2.USERNAME AS FRIEND_NAME,
    M2.DOB AS FRIEND_DOB,
    M2.IMAGE AS FRIEND_IMAGE
FROM
    FRIENDSHIP F
    JOIN MEMBER M2 ON F.FRIEND_ID = M2.ID
WHERE
    F.STATUS = 'FRIEND'
UNION ALL
SELECT
    F.FRIEND_ID AS MEMBER_ID,
    F.MEMBER_ID AS FRIEND_ID,
    M1.USERNAME AS FRIEND_NAME,
    M1.DOB AS FRIEND_DOB,
    M1.IMAGE AS FRIEND_IMAGE
FROM
    FRIENDSHIP F
    JOIN MEMBER M1 ON F.MEMBER_ID = M1.ID
WHERE
    F.STATUS = 'FRIEND';

-- Friend requests view (used per member) 
CREATE VIEW
    FRIEND_REQUESTS_VIEW AS
SELECT
    M2.ID AS FRIEND_ID,
    M1.ID AS MEMBER_ID,
    M1.USERNAME AS MEMBER_NAME,
    M1.DOB AS MEMBER_DOB,
    M1.IMAGE AS MEMBER_IMAGE
FROM
    FRIENDSHIP F
    JOIN MEMBER M1 ON F.MEMBER_ID = M1.ID
    JOIN MEMBER M2 ON F.FRIEND_ID = M2.ID
WHERE
    F.STATUS = 'PENDING';

-- Wishlist view that calculates contribution/remaining
CREATE VIEW
    WISHLIST_VIEW AS
SELECT
    W.MEMBER_ID,
    P.ID AS PRODUCT_ID,
    P.NAME,
    P.BRAND,
    P."INFO",
    P.PRICE,
    P.IMAGE,
    COALESCE(SUM(C.AMOUNT), 0) AS TOTAL_CONTRIBUTION,
    P.PRICE - COALESCE(SUM(C.AMOUNT), 0) AS REMAINING
FROM
    WISHLIST W
    JOIN PRODUCT P ON W.PRODUCT_ID = P.ID
    LEFT JOIN CONTRIBUTION C ON W.MEMBER_ID = C.TO_MEMBER_ID
    AND W.PRODUCT_ID = C.PRODUCT_ID
GROUP BY
    W.MEMBER_ID,
    P.ID,
    P.NAME,
    P.BRAND,
    P."INFO",
    P.PRICE,
    P.IMAGE;

--- [TRIGGERS] -----------------------------------------------------------------
-- Delete all contributions; after a wishlist deletion (CASCADE maybe?)
CREATE TRIGGER DELETE_CONTRIBUTIONS_AFTER_WISHLIST_DELETE AFTER DELETE ON WISHLIST REFERENCING OLD AS W FOR EACH ROW
DELETE FROM CONTRIBUTION
WHERE
    TO_MEMBER_ID = W.MEMBER_ID
    AND PRODUCT_ID = W.PRODUCT_ID;

-- Notify wishlist owner; if fully funded
CREATE TRIGGER NOTIFY_WISHLIST_OWNER AFTER INSERT ON CONTRIBUTION REFERENCING NEW AS C0 FOR EACH ROW
INSERT INTO
    NOTIFICATION (MEMBER_ID, INFO)
SELECT
    C0.TO_MEMBER_ID,
    'Your wishlist item "' || P.NAME || '" is fully funded!'
FROM
    WISHLIST_VIEW W
    JOIN PRODUCT P ON W.PRODUCT_ID = P.ID
WHERE
    W.MEMBER_ID = C0.TO_MEMBER_ID
    AND W.PRODUCT_ID = C0.PRODUCT_ID
    AND W.REMAINING = 0
    AND NOT EXISTS (
        SELECT
            1
        FROM
            NOTIFICATION
        WHERE
            MEMBER_ID = C0.TO_MEMBER_ID
            AND INFO = 'Your wishlist item "' || P.NAME || '" is fully funded!'
    );

-- Notify all contributors; if fully funded
CREATE TRIGGER NOTIFY_CONTRIBUTORS AFTER INSERT ON CONTRIBUTION REFERENCING NEW AS C0 FOR EACH ROW
INSERT INTO
    NOTIFICATION (MEMBER_ID, INFO)
SELECT DISTINCT
    C.FROM_MEMBER_ID,
    'You helped (' || M.USERNAME || ') fully fund "' || P.NAME || '"!'
FROM
    CONTRIBUTION C
    JOIN MEMBER M ON C.TO_MEMBER_ID = M.ID
    JOIN PRODUCT P ON C.PRODUCT_ID = P.ID
    JOIN WISHLIST_VIEW W ON C.TO_MEMBER_ID = W.MEMBER_ID
    AND C.PRODUCT_ID = W.PRODUCT_ID
WHERE
    C.TO_MEMBER_ID = C0.TO_MEMBER_ID
    AND C.PRODUCT_ID = C0.PRODUCT_ID
    AND W.REMAINING = 0
    AND NOT EXISTS (
        SELECT
            1
        FROM
            NOTIFICATION
        WHERE
            MEMBER_ID = C.FROM_MEMBER_ID
            AND INFO = 'You helped (' || M.USERNAME || ') fully fund "' || P.NAME || '"!'
    );